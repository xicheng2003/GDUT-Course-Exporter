name: Update GDUT Calendar

on:
  # 每天在北京时间早上8点（UTC时间0点）自动运行
  schedule:
    - cron: '0 0 * * *'
  # 允许手动在 Actions 页面触发此工作流
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run script to generate .ics file
        run: python run.py
        env:
          ACCOUNT: ${{ secrets.GDUT_ACCOUNT }}
          PASSWORD: ${{ secrets.GDUT_PASSWORD }}


      # --- 诊断步骤：查看并上传生成的文件 ---
      - name: Check generated file content
        run: |
          echo "--- First 10 lines of the generated .ics file ---"
          # 假设文件名是 my_courses.ics，如果不是请替换
          head -n 10 my_courses.ics
          echo "------------------------------------------------"

      - name: Upload .ics file as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: calendar-ics-file
          # 同样，如果文件名不同请替换
          path: my_courses.ics
      # --- 诊断步骤结束 ---

      - name: Commit and Push .ics File
        run: |
          # 设置 Git 的用户信息
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 将生成的文件添加到暂存区
          # 注意：这里的文件名 'my_courses.ics' 必须和您脚本生成的文件名完全一致
          git add -f my_courses.ics
          
          # 提交文件，-m 后面的内容是提交信息
          # `git commit -am` 会暂存所有修改过的文件并提交，这里为了精确，我们使用上面的 add
          git commit -m "Update calendar on $(date)"
          
          # 强制推送到 gh-pages 分支
          # 这会用最新的提交覆盖掉 gh-pages 分支上旧的内容
          # 对于发布自动生成的文件来说，这是一个非常安全和标准的操作
          git push -f origin HEAD:gh-pages
